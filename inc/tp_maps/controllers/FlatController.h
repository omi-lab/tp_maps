#pragma once

#include "tp_maps/Controller.h"
#include "tp_maps/MouseEvent.h"

#include "tp_utils/CallbackCollection.h"

namespace tp_maps
{

//##################################################################################################
class TP_MAPS_EXPORT FlatController : public Controller
{
  TP_DQ;
public:
  //################################################################################################
  FlatController(Map* map);

  //################################################################################################
  glm::vec3 focalPoint() const;

  //################################################################################################
  void setFocalPoint(const glm::vec3& focalPoint);

  //################################################################################################
  float distance() const;

  //################################################################################################
  void setDistance(float distance);

  //################################################################################################
  bool allowRotation() const;

  //################################################################################################
  void setAllowRotation(bool allowRotation);

  //################################################################################################
  bool variableViewAngle() const;

  //################################################################################################
  void setVariableViewAngle(bool variableViewAngle);

  //################################################################################################
  bool allowTranslation() const;

  //################################################################################################
  void setAllowTranslation(bool allowTranslation);

  //################################################################################################
  bool allowZoom() const;

  //################################################################################################
  void setAllowZoom(bool allowZoom);

  //################################################################################################
  //! Rotation in degrees
  float rotationAngle() const;

  //################################################################################################
  void setRotationAngle(float rotationAngle);

  //################################################################################################
  //! Rotation in degrees
  float viewAngle() const;

  //################################################################################################
  void setViewAngle(float viewAngle);

  //################################################################################################
  float rotationFactor() const;

  //################################################################################################
  void setRotationFactor(float rotationFactor);

  //################################################################################################
  void assignMouseButtons(Button rotateButton, Button translateButton);

  //################################################################################################
  void saveState(nlohmann::json& j) const override;

  //################################################################################################
  void loadState(const nlohmann::json& j) override;

  //################################################################################################
  struct Data
  {
    float distance{10.0f};

    //The state of the camera
    float viewAngle{0.0f};
    float rotationAngle{0.0f};

    glm::vec3 focalPoint{0, 0, 0};
  };

  //################################################################################################
  void setData(const Data& data);

  //################################################################################################
  const Data& data() const;

  //################################################################################################
  tp_utils::CallbackCollection<void()> dataEdited;

protected:
  //################################################################################################
  ~FlatController() override;

  //################################################################################################
   void mapResized(int w, int h) override;

  //################################################################################################
  void updateMatrices() override;

  //################################################################################################
  bool mouseEvent(const MouseEvent& event) override;

  //################################################################################################
  virtual void translate(float dx, float dy, double msSincePrevious);

  //################################################################################################
  virtual void translateInteractionFinished();

  //################################################################################################
  virtual void translateInteractionStarted();
};

}
